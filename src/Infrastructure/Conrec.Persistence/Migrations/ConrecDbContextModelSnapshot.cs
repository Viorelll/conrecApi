// <auto-generated />
using System;
using Conrec.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Conrec.Persistence.Migrations
{
    [DbContext(typeof(ConrecDbContext))]
    partial class ConrecDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Conrec.Domain.Entities.AdditionalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("HasOwnCar")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRequiredPPE")
                        .HasColumnType("bit");

                    b.Property<int>("WillingMiles")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AdditionalInformation");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("Reference")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_Country");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_Currency");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("AdditionalInformationId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("AvailabilStartsOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("AvailabilWorkImmediate")
                        .HasColumnType("bit");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("NINO")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalInformationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SkillId");

                    b.HasIndex("TeamId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Employer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("JobRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("JobRoleId");

                    b.ToTable("Employer");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Communication")
                        .HasColumnType("int");

                    b.Property<int>("PaymentPromptness")
                        .HasColumnType("int");

                    b.Property<int>("Professionalism")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SpecificationClarity")
                        .HasColumnType("int");

                    b.Property<int>("WorkAgain")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectEmployeeId")
                        .IsUnique()
                        .HasFilter("[ProjectEmployeeId] IS NOT NULL");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.JobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_JobRole");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("DateOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<double>("PayRate")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PaymentFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("WorkedHours")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentFrequencyId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.PaymentFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_PaymentFrequency");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_PaymentType");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_Period");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CompletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpectedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("FilledBy")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PostedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Requires")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.ProjectEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TotalTimeWork")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEmployee");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.ProjectPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPaymentId")
                        .IsUnique()
                        .HasFilter("[ProjectPaymentId] IS NOT NULL");

                    b.ToTable("ProjectPayment");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.ProjectSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("EffectiveFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EffectiveTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("ProjectEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectEmployeeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ProjectSchedule");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Absences")
                        .HasColumnType("int");

                    b.Property<int>("IssuesNumber")
                        .HasColumnType("int");

                    b.Property<int>("IssuesPerDay")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("Warnings")
                        .HasColumnType("int");

                    b.Property<int>("WorkDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectEmployeeId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.SalaryPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_SalaryPayment");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("BreakEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("BreakStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DayEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DayStart")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsBreakPaid")
                        .HasColumnType("bit");

                    b.Property<double>("TotalHoursWorked")
                        .HasColumnType("float");

                    b.Property<int>("WorkDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkDayId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_Skill");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LeaderId")
                        .HasColumnType("int");

                    b.Property<int>("SalaryPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryPaymentId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.TermsAndConditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("TermsAndConditions");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("RegisterDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserRolesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserRolesId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_UserRole");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.WorkDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ref_WorkDay");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Bank", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.User", "User")
                        .WithMany("Banks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Document", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.Employee", null)
                        .WithMany("Documents")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Conrec.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.AdditionalInformation", "AdditionalInformation")
                        .WithOne("Employee")
                        .HasForeignKey("Conrec.Domain.Entities.Employee", "AdditionalInformationId");

                    b.HasOne("Conrec.Domain.Entities.Country", "Country")
                        .WithOne("Employee")
                        .HasForeignKey("Conrec.Domain.Entities.Employee", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conrec.Domain.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("Conrec.Domain.Entities.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conrec.Domain.Entities.Skill", "Skill")
                        .WithOne("Employee")
                        .HasForeignKey("Conrec.Domain.Entities.Employee", "SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conrec.Domain.Entities.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Employer", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.Company", "Company")
                        .WithOne("Employer")
                        .HasForeignKey("Conrec.Domain.Entities.Employer", "CompanyId");

                    b.HasOne("Conrec.Domain.Entities.User", "User")
                        .WithOne("Employer")
                        .HasForeignKey("Conrec.Domain.Entities.Employer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conrec.Domain.Entities.JobRole", "JobRole")
                        .WithOne("Employer")
                        .HasForeignKey("Conrec.Domain.Entities.Employer", "JobRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.ProjectEmployee", "ProjectEmployee")
                        .WithOne("ProjectFeedback")
                        .HasForeignKey("Conrec.Domain.Entities.Feedback", "ProjectEmployeeId");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Payment", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.Currency", null)
                        .WithOne("Payment")
                        .HasForeignKey("Conrec.Domain.Entities.Payment", "CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conrec.Domain.Entities.PaymentFrequency", null)
                        .WithOne("Payment")
                        .HasForeignKey("Conrec.Domain.Entities.Payment", "PaymentFrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conrec.Domain.Entities.PaymentType", null)
                        .WithOne("Payment")
                        .HasForeignKey("Conrec.Domain.Entities.Payment", "PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Project", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.ProjectEmployee", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.Employee", "Employee")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conrec.Domain.Entities.Project", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.ProjectPayment", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.Payment", "Payment")
                        .WithOne("ProjectPayment")
                        .HasForeignKey("Conrec.Domain.Entities.ProjectPayment", "PaymentId");

                    b.HasOne("Conrec.Domain.Entities.Project", "Project")
                        .WithMany("ProjectPayments")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Conrec.Domain.Entities.ProjectEmployee", "ProjectEmployee")
                        .WithOne("ProjectPayment")
                        .HasForeignKey("Conrec.Domain.Entities.ProjectPayment", "ProjectPaymentId");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.ProjectSchedule", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.ProjectEmployee", "ProjectEmployee")
                        .WithMany("ProjectSchedules")
                        .HasForeignKey("ProjectEmployeeId");

                    b.HasOne("Conrec.Domain.Entities.Project", "Project")
                        .WithMany("ProjectSchedules")
                        .HasForeignKey("ProjectId");

                    b.HasOne("Conrec.Domain.Entities.Schedule", "Schedule")
                        .WithMany("ProjectSchedules")
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Report", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.ProjectEmployee", "ProjectEmployee")
                        .WithMany("ProjectReports")
                        .HasForeignKey("ProjectEmployeeId");
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.WorkDay", "WorkDay")
                        .WithOne("Schedule")
                        .HasForeignKey("Conrec.Domain.Entities.Schedule", "WorkDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.Team", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.SalaryPayment", "SalaryPayment")
                        .WithOne("Team")
                        .HasForeignKey("Conrec.Domain.Entities.Team", "SalaryPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conrec.Domain.Entities.User", b =>
                {
                    b.HasOne("Conrec.Domain.Entities.Region", "Region")
                        .WithOne("User")
                        .HasForeignKey("Conrec.Domain.Entities.User", "RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conrec.Domain.Entities.UserRole", "UserRole")
                        .WithOne("User")
                        .HasForeignKey("Conrec.Domain.Entities.User", "UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
